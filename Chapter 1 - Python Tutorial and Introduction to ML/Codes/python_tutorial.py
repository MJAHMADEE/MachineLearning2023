# -*- coding: utf-8 -*-
"""Python Tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pqe0y56YY0baq-orZzBbPRG7kNqPox9_

# Python Tutorial
[![GitHub Repo](https://img.shields.io/github/stars/MJAHMADEE/MachineLearning2023?style=social)](https://github.com/MJAHMADEE/MachineLearning2023) - Course materials and assignments for the Machine Learning course.

#### Python basics
"""

# Single-line comment explaining the purpose of the code

"""
This is a
multi-line
comment
explaining more details about the code.
"""

# Variable assignment
x = 5
y = "Hello"

# Multiple variable assignment
a, b, c = 1, "two", 3.0

# Printing variables
print("Value of x:", x)
print("Value of y:", y)
print("Values of a, b, c:", a, b, c)

# Variable assignment for integers and floats
integer_value = 1
float_value = 2.5

# Variable assignment for strings
name = "Alice"
greeting = f"Hello, {name}"  # Using f-strings for string formatting
print("Greeting:", greeting)  # Added a label to the print statement

# Variable assignment for booleans
is_true = True
is_false = False

# Variable assignment for None
empty_value = None

# If-else statement
x = 5
if x > 10:
    print("x is greater than 10")
else:
    print("x is less than or equal to 10")

# If-elif-else statement
y = 15
if y < 10:
    print("y is less than 10")
elif 10 <= y < 20:
    print("y is between 10 and 19")
else:
    print("y is greater than or equal to 20")

# For loop example
print("For loop:")
for i in range(1, 6):
    print(i)

# While loop example
print("\nWhile loop:")
j = 1
while j < 6:
    print(j)
    j += 1

# Loop that iterates over a list
fruits = ["apple", "banana", "cherry"]
print("\nLoop that iterates over a list:")
for fruit in fruits:
    print(fruit)
print("List of fruits:", fruits)

# Using list comprehension for printing elements
print("\nUsing list comprehension to print elements:")
[print(x) for x in fruits]

# Define a function to greet a person by name
def greet(name):
    """
    Greets a person by name.

    Args:
        name (str): The name of the person to greet.
    """
    print("Hello, " + name)

# Call the greet function with a specific name
greet("Alice")

# Define a function with a default argument
def greet(name="world"):
    """
    Greets a person by name or "world" if no name is provided.

    Args:
        name (str, optional): The name of the person to greet. Defaults to "world".
    """
    print("Hello, " + name)

# Call the greet function with different names
greet()  # Prints "Hello, world"
greet("Alice")  # Prints "Hello, Alice"

# Define a class for representing a person
class Person:
    def __init__(self, name, age):
        """
        Initialize a Person object with a name and age.

        Args:
            name (str): The name of the person.
            age (int): The age of the person.
        """
        self.name = name
        self.age = age

    def say_hello(self):
        """
        Print a greeting with the person's name.
        """
        print("Hello, my name is " + self.name)

# Create an instance of the Person class
person1 = Person("Alice", 25)

# Call a method on the instance to greet
person1.say_hello()

# Define a set of numbers
numbers = {1, 2, 3, 4, 5}

# Check if 2 is in the set
is_2_in_numbers = 2 in numbers

# Print the result
print("Is 2 in the set? ", is_2_in_numbers)  # Output: True

# Define a dictionary to store information about a person
person = {
    "name": "John",
    "age": 25,
    "gender": "Male"
}

# Access and print the person's age
print("Age:", person["age"])  # Output: 25

# Add the person's city to the dictionary
person["city"] = "New York"

# Print the updated person dictionary
print("Person information:", person)
# Output: {"name": "John", "age": 25, "gender": "Male", "city": "New York"}

"""### Data Types"""

# Create a list of integers
my_list = [1, 2, 3, 4, 5]

# Accessing elements of the list
print("First element:", my_list[0])  # Output: 1
print("Third element:", my_list[2])  # Output: 3
print("Last element:", my_list[-1])  # Output: 5

# Slicing the list
print("Sliced sublist:", my_list[1:3])  # Output: [2, 3]
print("Sliced sublist:", my_list[:4])  # Output: [1, 2, 3, 4]

# Adding elements to the list
my_list.append(6)
my_list.insert(0, "Asghar")

# Changing list elements
my_list[1:4] = ["Mammad", "Alice", "Mammad"]
print("Updated list:", my_list)

# Removing an element from the list
my_list.remove("Mammad")
print("List after removal:", my_list)

# Length of the list
print("Length of the list:", len(my_list))  # Output: 6

# Creating a tuple
my_tuple = (1, 2, 3, 4, 5)

# Accessing elements of the tuple
print("First element:", my_tuple[0])  # Output: 1
print("Third element:", my_tuple[2])  # Output: 3

# Slicing the tuple
print("Sliced tuple:", my_tuple[1:3])  # Output: (2, 3)

# Tuples are immutable, so attempting to modify an element will raise an error
# my_tuple[0] = 6  # This will raise a TypeError

# Merging a list and a tuple
my_list = [6, 7, 8]
merged_list = my_list + list(my_tuple)  # Convert tuple to a list for merging
print("Merged list:", merged_list)

# Creating a dictionary to store information about a person
my_dict = {
    'name': 'John',
    'age': 30,
    'city': 'New York'
}

# Accessing values in the dictionary
print("Name:", my_dict['name'])  # Output: John
print("Age:", my_dict['age'])    # Output: 30

# Adding a new key-value pair to the dictionary
my_dict['gender'] = 'Male'

# Removing a key-value pair from the dictionary
del my_dict['city']

# Length of the dictionary
print("Dictionary length:", len(my_dict))  # Output: 2

# Create a set containing integers
my_set = {1, 2, 3, 4, 5}

# Add an element to the set
my_set.add(6)

# Remove an element from the set
my_set.remove(3)

# Calculate and print the length of the set
print("Set length:", len(my_set))  # Output: 5

"""#### Numpy basics"""

import numpy as np

# Creating NumPy arrays
arr1d = np.array([1, 2, 3, 4, 5])
arr2d = np.array([[1, 2, 3], [4, 5, 6]])
arr3d = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])

# Array indexing
print("Array indexing:")
print("Element at index 3 in arr1d:", arr1d[3])              # Output: 4
print("Element at row 1, column 2 in arr2d:", arr2d[1, 2])    # Output: 6
print("Element at layer 1, row 0, column 1 in arr3d:", arr3d[0, 1, 0])  # Output: 3

# Array slicing
print("\nArray slicing:")
print("Slice of arr1d from index 1 to 4:", arr1d[1:4])            # Output: [2, 3, 4]
print("Slices of arr2d from all rows, starting from column 1:", arr2d[:, 1:])  # Output: [[2, 3], [5, 6]]
print("Slices of arr3d from all layers, column 0, and starting from column 1:", arr3d[:, 0, 1:])  # Output: [[2], [6]]

# Array operations
print("\nArray operations:")
arr = np.array([1, 2, 3])
print("Adding 2 to each element:", arr + 2)               # Output: [3, 4, 5]
print("Multiplying each element by 2:", arr * 2)          # Output: [2, 4, 6]
print("Square root of each element:", np.sqrt(arr))       # Output: [1. 1.41421356 1.73205081]

import numpy as np

# Arithmetic operations
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

print("Addition of arrays:")
print(arr1 + arr2)           # Output: [5 7 9]

print("\nSubtraction of arrays:")
print(arr1 - arr2)           # Output: [-3 -3 -3]

print("\nMultiplication of arrays:")
print(arr1 * arr2)           # Output: [ 4 10 18]

print("\nDivision of arrays:")
print(arr2 / arr1)           # Output: [4.  2.5 2. ]

print("\nSquare of elements in arr1:")
print(arr1 ** 2)             # Output: [1 4 9]

# Statistical operations
arr = np.array([1, 2, 3, 4, 5])

print("\nMean of elements in arr:")
print(np.mean(arr))          # Output: 3.0

print("\nMedian of elements in arr:")
print(np.median(arr))        # Output: 3.0

print("\nStandard deviation of elements in arr:")
print(np.std(arr))           # Output: 1.4142135623730951

print("\nVariance of elements in arr:")
print(np.var(arr))           # Output: 2.0

print("\nMinimum value in arr:")
print(np.min(arr))           # Output: 1

print("\nMaximum value in arr:")
print(np.max(arr))           # Output: 5

import numpy as np

# Concatenate two NumPy arrays along axis 0 (row-wise)
result = np.concatenate((arr1, arr2), axis=0)

# Print the concatenated result
print("Concatenated result along axis 0 (row-wise):")
print(result)

import numpy as np
import matplotlib.pyplot as plt

# Generating random numbers
np.random.seed(0)

print("Random float between 0 and 1:")
print(np.random.rand())  # Output: 0.5488135039273248

print("\nRandom integers between 0 and 9 (5 values):")
print(np.random.randint(0, 10, 5))  # Output: [5 0 3 3 7]

print("\nRandom values sampled from a normal distribution (mean=0, std=1, 5 values):")
print(np.random.normal(0, 1, 5))  # Output: [-1.02126202  0.2408932   1.67516221 -0.04390368 -0.2814711]

# Probability distributions
uniform = np.random.uniform(0, 1, 1000)
normal = np.random.normal(0, 1, 1000)

# Plotting histograms
plt.hist(uniform, bins=20, alpha=0.5, label="Uniform")
plt.hist(normal, bins=20, alpha=0.5, label="Normal")
plt.legend(loc="upper right")
plt.xlabel("Value")
plt.ylabel("Frequency")
plt.title("Random Number Distributions")
plt.show()

"""### Matplotlib"""

import matplotlib.pyplot as plt
import numpy as np

# Create some data
x = np.linspace(0, 10, 100)
y = np.sin(x)

# Plot the data
plt.figure(figsize=(8, 6))  # Set the figure size (optional)
plt.plot(x, y, label="Sine Wave", color="blue", linewidth=2)  # Adding labels and style
plt.xlabel("X-axis")  # Label for the x-axis
plt.ylabel("Y-axis")  # Label for the y-axis
plt.title("Sine Wave Plot")  # Title for the plot
plt.grid(True)  # Display grid lines (optional)
plt.legend(loc="upper right")  # Add a legend (optional)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Create some data
x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Create a figure and axis object
fig, ax = plt.subplots(figsize=(8, 6))  # Set the figure size (optional)

# Plot the data with labels and styles
ax.plot(x, y1, label="Sin", color="blue", linewidth=2)
ax.plot(x, y2, label="Cos", color="red", linestyle="--", linewidth=2)

# Add labels to axes
ax.set_xlabel("X-axis")
ax.set_ylabel("Y-axis")

# Add a title to the plot
ax.set_title("Sine and Cosine Waves")

# Display a legend
ax.legend(loc="upper right")

# Display grid lines (optional)
ax.grid(True)

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Create some data
x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Create a figure and subplots
fig, axs = plt.subplots(2, figsize=(8, 6))  # Set the figure size (optional)

# Plot the data in the first subplot
axs[0].plot(x, y1, label="Sine", color="blue", linewidth=2)
axs[0].set_title("Sine Wave")  # Title for the first subplot
axs[0].set_xlabel("X-axis")
axs[0].set_ylabel("Y-axis")

# Plot the data in the second subplot
axs[1].plot(x, y2, label="Cosine", color="red", linestyle="--", linewidth=2)
axs[1].set_title("Cosine Wave")  # Title for the second subplot
axs[1].set_xlabel("X-axis")
axs[1].set_ylabel("Y-axis")

# Add legends to subplots
axs[0].legend(loc="upper right")
axs[1].legend(loc="upper right")

# Display grid lines in both subplots (optional)
axs[0].grid(True)
axs[1].grid(True)

# Adjust layout for better spacing (optional)
plt.tight_layout()

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Generate random data points
x = np.random.rand(50)
y = np.random.rand(50)

# Create a scatter plot
plt.figure(figsize=(8, 6))  # Set the figure size (optional)
plt.scatter(x, y, c='blue', marker='o', label='Random Points')  # Customize marker and color
plt.xlabel('X-axis')  # Label for the x-axis
plt.ylabel('Y-axis')  # Label for the y-axis
plt.title('Scatter Plot of Random Points')  # Title for the plot
plt.legend()  # Display legend (optional)
plt.grid(True)  # Display grid lines (optional)

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Create some data
labels = ["A", "B", "C", "D", "E"]
values = [20, 35, 30, 10, 5]

# Create a bar plot
plt.figure(figsize=(8, 6))  # Set the figure size (optional)
plt.bar(labels, values, color='skyblue')  # Customize bar color
plt.xlabel('Categories')  # Label for the x-axis
plt.ylabel('Values')  # Label for the y-axis
plt.title('Bar Plot of Categories and Values')  # Title for the plot
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Display horizontal grid lines (optional)
plt.xticks(rotation=0)  # Rotate x-axis labels if needed

# Display values on top of bars
for i, v in enumerate(values):
    plt.text(i, v + 1, str(v), ha='center', va='bottom')

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Generate random data points following a normal distribution
x = np.random.normal(size=1000)

# Create a histogram
plt.figure(figsize=(8, 6))  # Set the figure size (optional)
plt.hist(x, bins=30, color='skyblue', edgecolor='black')  # Customize color and edgecolor
plt.xlabel('Value')  # Label for the x-axis
plt.ylabel('Frequency')  # Label for the y-axis
plt.title('Histogram of Random Data')  # Title for the plot
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Display horizontal grid lines (optional)

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Set a random seed for reproducibility
np.random.seed(0)

# Generate random data with different standard deviations
data = [np.random.normal(0, std, 100) for std in range(1, 4)]

# Create a box plot
plt.figure(figsize=(8, 6))  # Set the figure size (optional)
plt.boxplot(data, labels=["std=1", "std=2", "std=3"], notch=True, patch_artist=True)  # Customize labels and style
plt.xlabel('Standard Deviation')  # Label for the x-axis
plt.ylabel('Values')  # Label for the y-axis
plt.title('Box Plot of Random Data with Different Standard Deviations')  # Title for the plot
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Display horizontal grid lines (optional)

# Show the plot
plt.show()

"""## Pandas"""

import pandas as pd

# Create a dictionary to store data
data = {
    "Name": ["Alice", "Bob", "Charlie", "Dave"],
    "Age": [25, 30, 35, 40],
    "Gender": ["F", "M", "M", "M"]
}

# Create a DataFrame from the dictionary
df = pd.DataFrame(data)

# Print the DataFrame
print("DataFrame:")
print(df)

# Selecting a column by name
name_column = df["Name"]
print("Name Column:")
print(name_column)

# Selecting a row by index
row_at_index_1 = df.loc[1]
print("Row at Index 1:")
print(row_at_index_1)

# Selecting a subset of the data using boolean indexing
subset_age_gt_30 = df[df["Age"] > 30]
print("Subset of Rows with Age > 30:")
print(subset_age_gt_30)

import pandas as pd

# Create a DataFrame
data = {
    "Name": ["Alice", "Bob", "Charlie", "Dave"],
    "Age": [25, 30, 35, 40],
    "Gender": ["F", "M", "M", "M"]
}

df = pd.DataFrame(data)

# Add a new column to the DataFrame
df["Salary"] = [50000, 60000, 70000, 80000]

# Group the data by gender and calculate the mean age and salary
grouped = df.groupby("Gender")
result = grouped.agg({"Age": "mean", "Salary": "mean"})

# Print the result
print("Mean Age and Salary Grouped by Gender:")
print(result)

"""# Homework Assignment: Introduction to Data Analysis with Numpy, Matplotlib, and Pandas in Google Colab

**Task:** In this assignment, you will gain hands-on experience in working with data using the Numpy, Matplotlib, and Pandas libraries in Google Colab. You will perform a basic data analysis task, so let's get started.

**Instructions:**

**Step 1:** Import the necessary libraries, including Numpy, Matplotlib, and Pandas.

**Step 2:** Create a Numpy array named 'x' that ranges from -2 to 2 with a step size of 0.1.

**Step 3:** Calculate the corresponding values of 'y' using the exponential function \(y = e^x\).

**Step 4:** Create a Pandas DataFrame with two columns, "x" and "y," to store the values of 'x' and 'y,' respectively.

**Step 5:** Plot the curve of \(y = e^x\) using Matplotlib. Be sure to label the x and y axes appropriately.

**Step 6:** Display the plot.

**Step 7 (Optional):** Calculate and print the values of 'y' for 'x' equal to -1 and 1 to observe how the exponential function behaves at these points.

**Step 8:** Save your Colab notebook and submit it.

Ensure that you provide clear comments to explain each step in your code. This assignment will help you become familiar with using Numpy, Pandas, and Matplotlib for basic data analysis and visualization.

Good luck, and enjoy your exploration of data analysis in Google Colab!

"""

# Step 1: Import necessary libraries
...

# Step 2: Create a Numpy array 'x'
...

# Step 3: Calculate 'y' using the exponential function
...

# Step 4: Create a Pandas DataFrame
...

# Step 5: Plot the curve
...

# Step 6: Display the plot
...

# Step 7 (Optional): Calculate and print y for x = -1 and x = 1
...

# Step 8: Save and submit your Colab notebook