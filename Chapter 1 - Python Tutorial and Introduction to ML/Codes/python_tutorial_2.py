# -*- coding: utf-8 -*-
"""Python Tutorial 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dxMMsw2R2rVCzd6mYx7XDDbUsiYXvPv0

# Python Tutorial 2
[![GitHub Repo](https://img.shields.io/github/stars/MJAHMADEE/MachineLearning2023?style=social)](https://github.com/MJAHMADEE/MachineLearning2023) - Course materials and assignments for the Machine Learning course.

## Numpy
"""

import numpy as np

# Creating NumPy arrays
arr1d = np.array([1, 2, 3, 4, 5])
arr2d = np.array([[1, 2, 3], [4, 5, 6]])
arr3d = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])

# Array indexing
print("Array indexing:")
print("Element at index 3 in arr1d:", arr1d[3])              # Output: 4
print("Element at row 1, column 2 in arr2d:", arr2d[1, 2])    # Output: 6
print("Element at layer 1, row 0, column 1 in arr3d:", arr3d[0, 1, 0])  # Output: 3

# Array slicing
print("\nArray slicing:")
print("Slice of arr1d from index 1 to 4:", arr1d[1:4])            # Output: [2, 3, 4]
print("Slices of arr2d from all rows, starting from column 1:", arr2d[:, 1:])  # Output: [[2, 3], [5, 6]]
print("Slices of arr3d from all layers, column 0, and starting from column 1:", arr3d[:, 0, 1:])  # Output: [[2], [6]]

# Array operations
print("\nArray operations:")
arr = np.array([1, 2, 3])
print("Adding 2 to each element:", arr + 2)               # Output: [3, 4, 5]
print("Multiplying each element by 2:", arr * 2)          # Output: [2, 4, 6]
print("Square root of each element:", np.sqrt(arr))       # Output: [1. 1.41421356 1.73205081]

import numpy as np

# Arithmetic operations
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

print("Addition of arrays:")
print(arr1 + arr2)           # Output: [5 7 9]

print("\nSubtraction of arrays:")
print(arr1 - arr2)           # Output: [-3 -3 -3]

print("\nMultiplication of arrays:")
print(arr1 * arr2)           # Output: [ 4 10 18]

print("\nDivision of arrays:")
print(arr2 / arr1)           # Output: [4.  2.5 2. ]

print("\nSquare of elements in arr1:")
print(arr1 ** 2)             # Output: [1 4 9]

# Statistical operations
arr = np.array([1, 2, 3, 4, 5])

print("\nMean of elements in arr:")
print(np.mean(arr))          # Output: 3.0

print("\nMedian of elements in arr:")
print(np.median(arr))        # Output: 3.0

print("\nStandard deviation of elements in arr:")
print(np.std(arr))           # Output: 1.4142135623730951

print("\nVariance of elements in arr:")
print(np.var(arr))           # Output: 2.0

print("\nMinimum value in arr:")
print(np.min(arr))           # Output: 1

print("\nMaximum value in arr:")
print(np.max(arr))           # Output: 5

import numpy as np

# Concatenate two NumPy arrays along axis 0 (row-wise)
result = np.concatenate((arr1, arr2), axis=0)

# Print the concatenated result
print("Concatenated result along axis 0 (row-wise):")
print(result)

import numpy as np
import matplotlib.pyplot as plt

# Generating random numbers
np.random.seed(0)

print("Random float between 0 and 1:")
print(np.random.rand())  # Output: 0.5488135039273248

print("\nRandom integers between 0 and 9 (5 values):")
print(np.random.randint(0, 10, 5))  # Output: [5 0 3 3 7]

print("\nRandom values sampled from a normal distribution (mean=0, std=1, 5 values):")
print(np.random.normal(0, 1, 5))  # Output: [-1.02126202  0.2408932   1.67516221 -0.04390368 -0.2814711]

# Probability distributions
uniform = np.random.uniform(0, 1, 1000)
normal = np.random.normal(0, 1, 1000)

# Plotting histograms
plt.hist(uniform, bins=20, alpha=0.5, label="Uniform")
plt.hist(normal, bins=20, alpha=0.5, label="Normal")
plt.legend(loc="upper right")
plt.xlabel("Value")
plt.ylabel("Frequency")
plt.title("Random Number Distributions")
plt.show()

"""## Matplotlib"""

import matplotlib.pyplot as plt
import numpy as np

# Create some data
x = np.linspace(0, 10, 100)
y = np.sin(x)

# Plot the data
plt.figure(figsize=(8, 6))  # Set the figure size (optional)
plt.plot(x, y, label="Sine Wave", color="blue", linewidth=2)  # Adding labels and style
plt.xlabel("X-axis")  # Label for the x-axis
plt.ylabel("Y-axis")  # Label for the y-axis
plt.title("Sine Wave Plot")  # Title for the plot
plt.grid(True)  # Display grid lines (optional)
plt.legend(loc="upper right")  # Add a legend (optional)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Create some data
x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Create a figure and axis object
fig, ax = plt.subplots(figsize=(8, 6))  # Set the figure size (optional)

# Plot the data with labels and styles
ax.plot(x, y1, label="Sin", color="blue", linewidth=2)
ax.plot(x, y2, label="Cos", color="red", linestyle="--", linewidth=2)

# Add labels to axes
ax.set_xlabel("X-axis")
ax.set_ylabel("Y-axis")

# Add a title to the plot
ax.set_title("Sine and Cosine Waves")

# Display a legend
ax.legend(loc="upper right")

# Display grid lines (optional)
ax.grid(True)

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Create some data
x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Create a figure and subplots
fig, axs = plt.subplots(2, figsize=(8, 6))  # Set the figure size (optional)

# Plot the data in the first subplot
axs[0].plot(x, y1, label="Sine", color="blue", linewidth=2)
axs[0].set_title("Sine Wave")  # Title for the first subplot
axs[0].set_xlabel("X-axis")
axs[0].set_ylabel("Y-axis")

# Plot the data in the second subplot
axs[1].plot(x, y2, label="Cosine", color="red", linestyle="--", linewidth=2)
axs[1].set_title("Cosine Wave")  # Title for the second subplot
axs[1].set_xlabel("X-axis")
axs[1].set_ylabel("Y-axis")

# Add legends to subplots
axs[0].legend(loc="upper right")
axs[1].legend(loc="upper right")

# Display grid lines in both subplots (optional)
axs[0].grid(True)
axs[1].grid(True)

# Adjust layout for better spacing (optional)
plt.tight_layout()

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Generate random data points
x = np.random.rand(50)
y = np.random.rand(50)

# Create a scatter plot
plt.figure(figsize=(8, 6))  # Set the figure size (optional)
plt.scatter(x, y, c='blue', marker='o', label='Random Points')  # Customize marker and color
plt.xlabel('X-axis')  # Label for the x-axis
plt.ylabel('Y-axis')  # Label for the y-axis
plt.title('Scatter Plot of Random Points')  # Title for the plot
plt.legend()  # Display legend (optional)
plt.grid(True)  # Display grid lines (optional)

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Create some data
labels = ["A", "B", "C", "D", "E"]
values = [20, 35, 30, 10, 5]

# Create a bar plot
plt.figure(figsize=(8, 6))  # Set the figure size (optional)
plt.bar(labels, values, color='skyblue')  # Customize bar color
plt.xlabel('Categories')  # Label for the x-axis
plt.ylabel('Values')  # Label for the y-axis
plt.title('Bar Plot of Categories and Values')  # Title for the plot
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Display horizontal grid lines (optional)
plt.xticks(rotation=0)  # Rotate x-axis labels if needed

# Display values on top of bars
for i, v in enumerate(values):
    plt.text(i, v + 1, str(v), ha='center', va='bottom')

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Generate random data points following a normal distribution
x = np.random.normal(size=1000)

# Create a histogram
plt.figure(figsize=(8, 6))  # Set the figure size (optional)
plt.hist(x, bins=30, color='skyblue', edgecolor='black')  # Customize color and edgecolor
plt.xlabel('Value')  # Label for the x-axis
plt.ylabel('Frequency')  # Label for the y-axis
plt.title('Histogram of Random Data')  # Title for the plot
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Display horizontal grid lines (optional)

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Set a random seed for reproducibility
np.random.seed(0)

# Generate random data with different standard deviations
data = [np.random.normal(0, std, 100) for std in range(1, 4)]

# Create a box plot
plt.figure(figsize=(8, 6))  # Set the figure size (optional)
plt.boxplot(data, labels=["std=1", "std=2", "std=3"], notch=True, patch_artist=True)  # Customize labels and style
plt.xlabel('Standard Deviation')  # Label for the x-axis
plt.ylabel('Values')  # Label for the y-axis
plt.title('Box Plot of Random Data with Different Standard Deviations')  # Title for the plot
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Display horizontal grid lines (optional)

# Show the plot
plt.show()

"""## Pandas"""

import pandas as pd

# Create a dictionary to store data
data = {
    "Name": ["Alice", "Bob", "Charlie", "Dave"],
    "Age": [25, 30, 35, 40],
    "Gender": ["F", "M", "M", "M"]
}

# Create a DataFrame from the dictionary
df = pd.DataFrame(data)

# Print the DataFrame
print("DataFrame:")
print(df)

# Selecting a column by name
name_column = df["Name"]
print("Name Column:")
print(name_column)

# Selecting a row by index
row_at_index_1 = df.loc[1]
print("Row at Index 1:")
print(row_at_index_1)

# Selecting a subset of the data using boolean indexing
subset_age_gt_30 = df[df["Age"] > 30]
print("Subset of Rows with Age > 30:")
print(subset_age_gt_30)

import pandas as pd

# Create a DataFrame
data = {
    "Name": ["Alice", "Bob", "Charlie", "Dave"],
    "Age": [25, 30, 35, 40],
    "Gender": ["F", "M", "M", "M"]
}

df = pd.DataFrame(data)

# Add a new column to the DataFrame
df["Salary"] = [50000, 60000, 70000, 80000]

# Group the data by gender and calculate the mean age and salary
grouped = df.groupby("Gender")
result = grouped.agg({"Age": "mean", "Salary": "mean"})

# Print the result
print("Mean Age and Salary Grouped by Gender:")
print(result)