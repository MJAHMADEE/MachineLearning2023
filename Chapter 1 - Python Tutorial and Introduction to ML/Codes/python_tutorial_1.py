# -*- coding: utf-8 -*-
"""Python Tutorial 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pqe0y56YY0baq-orZzBbPRG7kNqPox9_

# Python Tutorial 1
[![GitHub Repo](https://img.shields.io/github/stars/MJAHMADEE/MachineLearning2023?style=social)](https://github.com/MJAHMADEE/MachineLearning2023) - Course materials and assignments for the Machine Learning course.

## Python Basics
"""

# Single-line comment explaining the purpose of the code

"""
This is a
multi-line
comment
explaining more details about the code.
"""

# Variable assignment
x = 5
y = "Hello"

# Multiple variable assignment
a, b, c = 1, "two", 3.0

# Printing variables
print("Value of x:", x)
print("Value of y:", y)
print("Values of a, b, c:", a, b, c)

# Variable assignment for integers and floats
integer_value = 1
float_value = 2.5

# Variable assignment for strings
name = "Alice"
greeting = f"Hello, {name}"  # Using f-strings for string formatting
print("Greeting:", greeting)  # Added a label to the print statement

# Variable assignment for booleans
is_true = True
is_false = False

# Variable assignment for None
empty_value = None

# If-else statement
x = 5
if x > 10:
    print("x is greater than 10")
else:
    print("x is less than or equal to 10")

# If-elif-else statement
y = 15
if y < 10:
    print("y is less than 10")
elif 10 <= y < 20:
    print("y is between 10 and 19")
else:
    print("y is greater than or equal to 20")

# For loop example
print("For loop:")
for i in range(1, 6):
    print(i)

# While loop example
print("\nWhile loop:")
j = 1
while j < 6:
    print(j)
    j += 1

# Loop that iterates over a list
fruits = ["apple", "banana", "cherry"]
print("\nLoop that iterates over a list:")
for fruit in fruits:
    print(fruit)
print("List of fruits:", fruits)

# Using list comprehension for printing elements
print("\nUsing list comprehension to print elements:")
[print(x) for x in fruits]

# Create a list of integers
my_list = [1, 2, 3, 4, 5]

# Accessing elements of the list
print("First element:", my_list[0])  # Output: 1
print("Third element:", my_list[2])  # Output: 3
print("Last element:", my_list[-1])  # Output: 5

# Slicing the list
print("Sliced sublist:", my_list[1:3])  # Output: [2, 3]
print("Sliced sublist:", my_list[:4])  # Output: [1, 2, 3, 4]

# Adding elements to the list
my_list.append(6)
my_list.insert(0, "Asghar")

# Changing list elements
my_list[1:4] = ["Mammad", "Alice", "Mammad"]
print("Updated list:", my_list)

# Removing an element from the list
my_list.remove("Mammad")
print("List after removal:", my_list)

# Length of the list
print("Length of the list:", len(my_list))  # Output: 6

# Creating a tuple
my_tuple = (1, 2, 3, 4, 5)

# Accessing elements of the tuple
print("First element:", my_tuple[0])  # Output: 1
print("Third element:", my_tuple[2])  # Output: 3

# Slicing the tuple
print("Sliced tuple:", my_tuple[1:3])  # Output: (2, 3)

# Tuples are immutable, so attempting to modify an element will raise an error
# my_tuple[0] = 6  # This will raise a TypeError

# Merging a list and a tuple
my_list = [6, 7, 8]
merged_list = my_list + list(my_tuple)  # Convert tuple to a list for merging
print("Merged list:", merged_list)

# Creating a dictionary to store information about a person
my_dict = {
    'name': 'John',
    'age': 30,
    'city': 'New York'
}

# Accessing values in the dictionary
print("Name:", my_dict['name'])  # Output: John
print("Age:", my_dict['age'])    # Output: 30

# Adding a new key-value pair to the dictionary
my_dict['gender'] = 'Male'

# Removing a key-value pair from the dictionary
del my_dict['city']

# Length of the dictionary
print("Dictionary length:", len(my_dict))  # Output: 2

# Create a set containing integers
my_set = {1, 2, 3, 4, 5}

# Add an element to the set
my_set.add(6)

# Remove an element from the set
my_set.remove(3)

# Calculate and print the length of the set
print("Set length:", len(my_set))  # Output: 5

# Define a function to greet a person by name
def greet(name):
    """
    Greets a person by name.

    Args:
        name (str): The name of the person to greet.
    """
    print("Hello, " + name)

# Call the greet function with a specific name
greet("Alice")

# Define a function with a default argument
def greet(name="world"):
    """
    Greets a person by name or "world" if no name is provided.

    Args:
        name (str, optional): The name of the person to greet. Defaults to "world".
    """
    print("Hello, " + name)

# Call the greet function with different names
greet()  # Prints "Hello, world"
greet("Alice")  # Prints "Hello, Alice"

# Define a class for representing a person
class Person:
    def __init__(self, name, age):
        """
        Initialize a Person object with a name and age.

        Args:
            name (str): The name of the person.
            age (int): The age of the person.
        """
        self.name = name
        self.age = age

    def say_hello(self):
        """
        Print a greeting with the person's name.
        """
        print("Hello, my name is " + self.name)

# Create an instance of the Person class
person1 = Person("Alice", 25)

# Call a method on the instance to greet
person1.say_hello()

# Define a class for representing a person
class Person:
    def __init__(self, name, age):
        """
        Initialize a Person object with a name and age.

        Args:
            name (str): The name of the person.
            age (int): The age of the person.
        """
        self.name = name
        self.age = age

    def say_hello(self):
        """
        Print a greeting with the person's name.
        """
        print("Hello, my name is " + self.name)

# Define a subclass called Student that inherits from Person
class Student(Person):
    def __init__(self, name, age, student_id):
        """
        Initialize a Student object with a name, age, and student ID.

        Args:
            name (str): The name of the student.
            age (int): The age of the student.
            student_id (str): The student ID of the student.
        """
        super().__init__(name, age)
        self.student_id = student_id

    def study(self, subject):
        """
        Print a message indicating that the student is studying a subject.

        Args:
            subject (str): The subject the student is studying.
        """
        print(self.name + " is studying " + subject)

# Create an instance of the Person class
person1 = Person("Alice", 25)

# Call a method on the Person instance to greet
person1.say_hello()

# Create an instance of the Student class
student1 = Student("Bob", 20, "12345")

# Call a method on the Student instance to greet
student1.say_hello()

# Call a method specific to the Student class
student1.study("Math")

# Define a set of numbers
numbers = {1, 2, 3, 4, 5}

# Check if 2 is in the set
is_2_in_numbers = 2 in numbers

# Print the result
print("Is 2 in the set? ", is_2_in_numbers)  # Output: True

# Define a dictionary to store information about a person
person = {
    "name": "John",
    "age": 25,
    "gender": "Male"
}

# Access and print the person's age
print("Age:", person["age"])  # Output: 25

# Add the person's city to the dictionary
person["city"] = "New York"

# Print the updated person dictionary
print("Person information:", person)
# Output: {"name": "John", "age": 25, "gender": "Male", "city": "New York"}