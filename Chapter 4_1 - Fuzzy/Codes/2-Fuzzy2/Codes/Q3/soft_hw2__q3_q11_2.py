# -*- coding: utf-8 -*-
"""Soft_HW2__Q3_Q11_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xuPVabPBS8st0Pyc28W4nhXQF5cFsvPI

## <div dir=rtl>
<b><p align="justify"><font face = "IRLotus" size = "5">ترسیم تقریب فازی از تابع اصلی و میزان خطای آن در شکل ۲-۱۱ کتاب (تابع تعلق مثلثی)
</font><br />
</div>
"""

import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

alpha = -3
beta = 3
x = np.arange(alpha, beta, 0.001)

h = 1
N = 8

g_bar = np.zeros(N)
ej = np.zeros(N)

num = 0
den = 0


def trimf(x, abc):
    return np.fmax(np.fmin((x - abc[0]) / (abc[1] - abc[0]), (abc[2] - x) / (abc[2] - abc[1])), 0)


for j in range(1, N):
    ej[j] = -3 + h * (j - 1)
    if j == 1:
        mu_A_x = trimf(x, [-3, -3, -3 + h])
    elif j == N:
        mu_A_x = trimf(x, [3 - h, 3, 3])
    else:
        mu_A_x = trimf(x, [-3 + h * (j - 2), -3 + h * (j - 1), -3 + h * (j)])

    g_bar[j] = np.sin(ej[j])
    num = num + g_bar[j] * mu_A_x
    den = den + mu_A_x

f_x = num / den
g_x = np.sin(x)

plt.figure(0)
plt.plot(x, g_x, 'b-', x, f_x, 'r--', linewidth=2)
plt.xlabel('$x$')
plt.ylabel('$g(x), f(x)$')
plt.legend(['$g(x)$', '$f(x)$'])
plt.grid(True)
plt.savefig('fuzzy1.pdf')

plt.figure(1)
plt.plot(x, f_x, linewidth=2)
plt.xlabel('$x$')
plt.ylabel('$f(x)$')
plt.legend(['$f(x)$'])
plt.grid(True)
plt.savefig('fuzzy2.svg')

plt.figure(2)
E = f_x - g_x
plt.plot(x, E, linewidth=2)
plt.xlabel('$x$')
plt.ylabel('$Error$')
plt.legend(['$Error$'])
plt.grid(True)
plt.savefig('fuzzy3.svg')
plt.show()

"""## <div dir=rtl>
<b><p align="justify"><font face = "IRLotus" size = "5">ترسیم تقریب فازی از تابع اصلی و میزان خطای آن در شکل ۲-۱۱ کتاب (تابع تعلق گاوسی)
</font><br />
</div>
"""

import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

alpha = -3
beta = 3
x = np.arange(alpha, beta, 0.001)

h = 1
N = 8

g_bar = np.zeros(N)
ej = np.zeros(N)

num = 0
den = 0


def gaussmf(x, abc):
    return np.exp(-1 * ((x - abc[0]) / abc[1]) ** 2)


for j in range(1, N):
    ej[j] = -3 + h * (j - 1)
    if j == 1:
        mu_A_x = gaussmf(x, [-3, h])
    elif j == N:
        mu_A_x = gaussmf(x, [3, h])
    else:
        mu_A_x = gaussmf(x, [-3 + h * (j - 1), h])

    g_bar[j] = np.sin(ej[j])
    num = num + g_bar[j] * mu_A_x
    den = den + mu_A_x
    
f_x = num / den
g_x = np.sin(x)

plt.figure(0)
plt.plot(x, g_x, 'b-', x, f_x, 'r--', linewidth=2)
plt.xlabel('$x$')
plt.ylabel('$g(x), f(x)$')
plt.legend(['$g(x)$', '$f(x)$'])
plt.grid(True)
plt.savefig('fuzzy4.svg')

plt.figure(1)
plt.plot(x, f_x, linewidth=2)
plt.xlabel('$x$')
plt.ylabel('$f(x)$')
plt.legend(['$f(x)$'])
plt.grid(True)
plt.savefig('fuzzy5.svg')

plt.figure(2)
E = f_x - g_x
plt.plot(x, E, linewidth=2)
plt.xlabel('$x$')
plt.ylabel('$Error$')
plt.legend(['$Error$'])
plt.grid(True)
plt.savefig('fuzzy6.svg')
plt.show()

"""## <div dir=rtl>
<b><p align="justify"><font face = "IRLotus" size = "5">
ترسیم تقریب فازی از تابع اصلی و میزان خطای آن در شکل ۲-۱۱ کتاب (توابع تعلق بیش‌تر)
</font><br />
</div>
"""

import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

alpha = -3
beta = 3
x = np.arange(alpha, beta, 0.001)

h = 0.1
N = 80

g_bar = np.zeros(N)
ej = np.zeros(N)

num = 0
den = 0


def trimf(x, abc):
    return np.fmax(np.fmin((x - abc[0]) / (abc[1] - abc[0]), (abc[2] - x) / (abc[2] - abc[1])), 0)


for j in range(1, N):
    ej[j] = -3 + h * (j - 1)
    if j == 1:
        mu_A_x = trimf(x, [-3, -3, -3 + h])
    elif j == N:
        mu_A_x = trimf(x, [3 - h, 3, 3])
    else:
        mu_A_x = trimf(x, [-3 + h * (j - 2), -3 + h * (j - 1), -3 + h * (j)])

    g_bar[j] = np.sin(ej[j])
    num = num + g_bar[j] * mu_A_x
    den = den + mu_A_x

f_x = num / den
g_x = np.sin(x)

plt.figure(0)
plt.plot(x, g_x, 'b-', x, f_x, 'r--', linewidth=2)
plt.xlabel('$x$')
plt.ylabel('$g(x), f(x)$')
plt.legend(['$g(x)$', '$f(x)$'])
plt.grid(True)
plt.savefig('fuzzy7.svg')

plt.figure(1)
plt.plot(x, f_x, linewidth=2)
plt.xlabel('$x$')
plt.ylabel('$f(x)$')
plt.legend(['$f(x)$'])
plt.grid(True)
plt.savefig('fuzzy8.svg')

plt.figure(2)
E = f_x - g_x
plt.plot(x, E, linewidth=2)
plt.xlabel('$x$')
plt.ylabel('$Error$')
plt.legend(['$Error$'])
plt.grid(True)
plt.savefig('fuzzy9.svg')
plt.show()

"""## <div dir=rtl>
<b><p align="justify"><font face = "IRLotus" size = "5">ترسیم تقریب فازی از تابع اصلی و میزان خطای آن در شکل ۲-۱۱ کتاب (تابع تعلق گاوسی و توابع تعلق بیش‌تر)
</font><br />
</div>
"""

import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

alpha = -3
beta = 3
x = np.arange(alpha, beta, 0.001)

h = 0.1
N = 80

g_bar = np.zeros(N)
ej = np.zeros(N)

num = 0
den = 0


def gaussmf(x, abc):
    return np.exp(-1 * ((x - abc[0]) / abc[1]) ** 2)


for j in range(1, N):
    ej[j] = -3 + h * (j - 1)
    if j == 1:
        mu_A_x = gaussmf(x, [-3, h])
    elif j == N:
        mu_A_x = gaussmf(x, [3, h])
    else:
        mu_A_x = gaussmf(x, [-3 + h * (j - 1), h])

    g_bar[j] = np.sin(ej[j])
    num = num + g_bar[j] * mu_A_x
    den = den + mu_A_x
    
f_x = num / den
g_x = np.sin(x)

plt.figure(0)
plt.plot(x, g_x, 'b-', x, f_x, 'r--', linewidth=2)
plt.xlabel('$x$')
plt.ylabel('$g(x), f(x)$')
plt.legend(['$g(x)$', '$f(x)$'])
plt.grid(True)
plt.savefig('fuzzy10.svg')

plt.figure(1)
plt.plot(x, f_x, linewidth=2)
plt.xlabel('$x$')
plt.ylabel('$f(x)$')
plt.legend(['$f(x)$'])
plt.grid(True)
plt.savefig('fuzzy11.svg')

plt.figure(2)
E = f_x - g_x
plt.plot(x, E, linewidth=2)
plt.xlabel('$x$')
plt.ylabel('$Error$')
plt.legend(['$Error$'])
plt.grid(True)
plt.savefig('fuzzy12.svg')
plt.show()